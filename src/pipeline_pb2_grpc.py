# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import pipeline_pb2 as pipeline__pb2

class ImageModelPipelineStub(object):
    """Service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/imagepipeline.ImageModelPipeline/Ping',
                request_serializer=pipeline__pb2.PingRequest.SerializeToString,
                response_deserializer=pipeline__pb2.PingReply.FromString,
                _registered_method=True)
        self.PromptObjectDetection = channel.unary_unary(
                '/imagepipeline.ImageModelPipeline/PromptObjectDetection',
                request_serializer=pipeline__pb2.PromptObjectDetectionRequest.SerializeToString,
                response_deserializer=pipeline__pb2.ObjectDetectionReply.FromString,
                _registered_method=True)
        self.ObjectDetection = channel.unary_unary(
                '/imagepipeline.ImageModelPipeline/ObjectDetection',
                request_serializer=pipeline__pb2.ObjectDetectionRequest.SerializeToString,
                response_deserializer=pipeline__pb2.ObjectDetectionReply.FromString,
                _registered_method=True)
        self.PoseDetection = channel.unary_unary(
                '/imagepipeline.ImageModelPipeline/PoseDetection',
                request_serializer=pipeline__pb2.PoseDetectionRequest.SerializeToString,
                response_deserializer=pipeline__pb2.PoseDetectionReply.FromString,
                _registered_method=True)
        self.PointPoseDetection = channel.unary_unary(
                '/imagepipeline.ImageModelPipeline/PointPoseDetection',
                request_serializer=pipeline__pb2.PointPoseDetectionRequest.SerializeToString,
                response_deserializer=pipeline__pb2.PoseDetectionReply.FromString,
                _registered_method=True)


class ImageModelPipelineServicer(object):
    """Service definition
    """

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PromptObjectDetection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ObjectDetection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PoseDetection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PointPoseDetection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImageModelPipelineServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=pipeline__pb2.PingRequest.FromString,
                    response_serializer=pipeline__pb2.PingReply.SerializeToString,
            ),
            'PromptObjectDetection': grpc.unary_unary_rpc_method_handler(
                    servicer.PromptObjectDetection,
                    request_deserializer=pipeline__pb2.PromptObjectDetectionRequest.FromString,
                    response_serializer=pipeline__pb2.ObjectDetectionReply.SerializeToString,
            ),
            'ObjectDetection': grpc.unary_unary_rpc_method_handler(
                    servicer.ObjectDetection,
                    request_deserializer=pipeline__pb2.ObjectDetectionRequest.FromString,
                    response_serializer=pipeline__pb2.ObjectDetectionReply.SerializeToString,
            ),
            'PoseDetection': grpc.unary_unary_rpc_method_handler(
                    servicer.PoseDetection,
                    request_deserializer=pipeline__pb2.PoseDetectionRequest.FromString,
                    response_serializer=pipeline__pb2.PoseDetectionReply.SerializeToString,
            ),
            'PointPoseDetection': grpc.unary_unary_rpc_method_handler(
                    servicer.PointPoseDetection,
                    request_deserializer=pipeline__pb2.PointPoseDetectionRequest.FromString,
                    response_serializer=pipeline__pb2.PoseDetectionReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'imagepipeline.ImageModelPipeline', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('imagepipeline.ImageModelPipeline', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ImageModelPipeline(object):
    """Service definition
    """

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/imagepipeline.ImageModelPipeline/Ping',
            pipeline__pb2.PingRequest.SerializeToString,
            pipeline__pb2.PingReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PromptObjectDetection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/imagepipeline.ImageModelPipeline/PromptObjectDetection',
            pipeline__pb2.PromptObjectDetectionRequest.SerializeToString,
            pipeline__pb2.ObjectDetectionReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ObjectDetection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/imagepipeline.ImageModelPipeline/ObjectDetection',
            pipeline__pb2.ObjectDetectionRequest.SerializeToString,
            pipeline__pb2.ObjectDetectionReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PoseDetection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/imagepipeline.ImageModelPipeline/PoseDetection',
            pipeline__pb2.PoseDetectionRequest.SerializeToString,
            pipeline__pb2.PoseDetectionReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PointPoseDetection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/imagepipeline.ImageModelPipeline/PointPoseDetection',
            pipeline__pb2.PointPoseDetectionRequest.SerializeToString,
            pipeline__pb2.PoseDetectionReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
